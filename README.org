#+title: cern-ldap.el: Collection of Emacs Lisp functions to interact with CERN's LDAP servers
#+author: Nacho Barrientos
#+email: nacho.barrientos@cern.ch
#+language: en
#+options: ':t toc:nil author:t email:t num:t

* License
See ~COPYING~.

* Disclaimer
This Emacs package has no affiliation whatsoever with CERN or the CERN
IT department and it's hence not maintained as part of any CERN
project.

However, the current maintainer (which is currently working for CERN)
will be happy to discuss changes and give a helping hand but please
note that developing ~cern-ldap.el~ is not part of his job.

Even though it's obviously tailored to the CERN context, this package
might also serve as inspiration for others learning how to talk to
LDAP servers using Emacs.

* Download and installation
The source code is available in Sourcehut:

- Sourcehut :: https://git.sr.ht/~nbarrientos/cern-ldap.el
- Github (mirror) :: https://github.com/nbarrientos/cern-ldap.el

At the moment there's no intention to make it available through MELPA
as it's unlikely it'd be accepted there for distribution due to the
specificity this package has.

** Using ~use-package~

Example installation with ~use-package~ using a local copy:

#+begin_src emacs-lisp
  (use-package cern-ldap
  :ensure nil
  :load-path "~/.emacs.d/local-packages/cern-ldap.el"
  :custom
  (cern-ldap-server-url "ldap://localhost:1389"))
#+end_src

Don't forget to clone the source code into the load path specified
above.

* Contributing

Send patches and/or comments to the [[https://lists.sr.ht/~nbarrientos/cern-ldap.el][mailing list]].

* Customisation options
The package allows the user to customise the behaviour of the code in
several ways. Here's just a list of the customisation variables for
quick reference:

- ~cern-ldap-server-url~
- ~cern-ldap-user-lookup-login-key~
- ~cern-ldap-user-lookup-full-name-key~
- ~cern-ldap-user-full-name-matching-type~
- ~cern-ldap-user-displayed-attributes~
- ~cern-ldap-user-group-membership-filter~
- ~cern-ldap-user-sort-key~

For more information just run ~M-x customize-group cern-ldap~ or read
the documentation of each of the variables listed above, for example
by running ~M-x describe-variable cern-ldap-server-url~.

* User interface
** With explicit input
These commands will always prompt for user input using the minibuffer.

- ~cern-ldap-user-by-login~ :: Lookup a user by login. With prefix
  argument, return more information.
- ~cern-ldap-user-by-full-name~ :: Lookup a user (or several) by full
  name. The search query is enclosed in ~*~ by default, making the
  search query more greedy.
- ~cern-ldap-group~ :: Lookup the members of a group by name. With
  prefix argument, do it non-recursive.

Please refer to the built-in help of each function for further
information.

** With implicit input
The following commands fish the required input from the current
buffer, either from the active region or from the word at point. The
word is collected with ~superword-mode~ enabled so for instance groups
with dashes are picked up.

- ~cern-ldap-user-by-login-dwim~
- ~cern-ldap-user-by-full-name-dwim~
- ~cern-ldap-group-dwim~

Please refer to the built-in help of each function for further
information.

* Combining with transient

It might be a good idea to pack these commands in a [[https://github.com/magit/transient][transient]] menu,
for example:

#+begin_src emacs-lisp
  (transient-define-prefix my/cern-ldap-dispatch ()
    "Dispatch CERN LDAP related commands."
    [["LDAP user (by login)"
      ("U" "Dwim" cern-ldap-user-by-login-dwim)
      ("u" "Ask" cern-ldap-user-by-login)]
     ["LDAP user (by full name)"
      ("F" "Dwim" cern-ldap-user-by-full-name-dwim)
      ("f" "Ask" cern-ldap-user-by-full-name)]
     ["LDAP group"
      ("G" "Dwim" cern-ldap-group-dwim)
      ("g" "Ask" cern-ldap-group)]])
#+end_src
